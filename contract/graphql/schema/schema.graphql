type Query {
  user: User
}

type User implements Node {
  id: ID!
  project(projectID: ID!): Project
  projects(after: String, first: Int, before: String, last: Int, projectIDs: [ID!], sortingOptions: [SortingOptionPair!]): ProjectTypeConnection
  edgeCluster(edgeClusterID: ID!): EdgeCluster
  edgeClusters(after: String, first: Int, before: String, last: Int, edgeClusterIDs: [ID!], projectIDs: [ID!], sortingOptions: [SortingOptionPair!]): EdgeClusterTypeConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Project implements Node {
  id: ID!
  name: String!
  edgeCluster(edgeClusterID: ID!): EdgeCluster
  edgeClusters(after: String, first: Int, before: String, last: Int, edgeClusterIDs: [ID!], sortOption: String): EdgeClusterTypeConnection
}

"""The edge cluster"""
type EdgeCluster implements Node {
  """The unique edge cluster ID"""
  id: ID!

  """The edge cluster name"""
  name: String!

  """The cluster secrect value"""
  clusterSecret: String!

  """The cluster type"""
  clusterType: EdgeClusterType!

  """The project that owns the edge cluster"""
  project: EdgeClusterProject!

  """The edge cluster provision details"""
  provisionDetails: ProvisionDetails!

  """The list of edge cluster nodes details"""
  nodes: [EdgeClusterNode!]!

  """The list of edge cluster pods details"""
  pods(nodeName: String, namespace: String): [EdgeClusterPod!]!

  """The list of edge cluster services details"""
  services(namespace: String): [EdgeClusterService!]!
}

"""The different cluster types"""
enum EdgeClusterType {
  """K3S cluster"""
  K3S
}

type EdgeClusterProject implements Node {
  id: ID!
  name: String!
}

"""
The edge cluster provision details contains details such as current status of the edge cluster as well as ingress address of the edge cluster to connect to
"""
type ProvisionDetails {
  """LoadBalancer contains the current status of the load-balancer"""
  loadBalancer: LoadBalancerStatus

  """The provisioned edge cluster kubeconfig content"""
  kubeconfigContent: String

  """The ports that are exposed by the service"""
  ports: [Int!]!
}

"""LoadBalancerStatus represents the status of a load-balancer"""
type LoadBalancerStatus {
  """
  Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points
  """
  ingress: [LoadBalancerIngress!]!
}

"""
LoadBalancerIngress represents the status of a load-balancer ingress point traffic intended for the service should be sent to an ingress point
"""
type LoadBalancerIngress {
  """IP is set for load-balancer ingress points that are IP based"""
  ip: String!

  """Hostname is set for load-balancer ingress points that are DNS based"""
  hostname: String!

  """Ports is a list of records of service ports"""
  portStatus: [PortStatus!]!
}

"""PortStatus represents the error condition of a service port"""
type PortStatus {
  """
  Port is the port number of the service port of which status is recorded here
  """
  port: Int!

  """
  Protocol is the protocol of the service port of which status is recorded here
  """
  protocol: Protocol!

  """Error is to record the problem with the service port"""
  error: String
}

"""Protocol defines network protocols"""
enum Protocol {
  """TCP protocol"""
  TCP

  """UDP protocol"""
  UDP

  """SCTP protocol"""
  SCTP
}

"""Contains information about the edge cluster node"""
type EdgeClusterNode {
  """The node metadata"""
  metadata: ObjectMeta!

  """The most recently observed status of the node"""
  status: NodeStatus!
}

"""Contains standard edge cluster objects metadata"""
type ObjectMeta {
  """The object unique identitfier"""
  id: ID!

  """The object name"""
  name: String!

  """The object namespace"""
  namespace: String!
}

"""Contains information about the current status of a node"""
type NodeStatus {
  """Conditions is an array of current observed node conditions"""
  conditions: [NodeCondition!]!

  """Addresses is the list of addresses reachable to the node"""
  addresses: [NodeAddress!]!

  """NodeInfo is the set of ids/uuids to uniquely identify the node"""
  nodeInfo: NodeSystemInfo!
}

""" Current service state of node"""
type NodeCondition {
  """Type is the type of the condition"""
  type: NodeConditionType!

  """Status is the status of the condition"""
  status: ConditionStatus!

  """Last time we got an update on a given condition"""
  lastHeartbeatTime: String!

  """Last time the condition transitioned from one status to another"""
  lastTransitionTime: String!

  """Unique, one-word, CamelCase reason for the condition last transition"""
  reason: String!

  """Human-readable message indicating details about last transition"""
  message: String!
}

"""The valid conditions of node"""
enum NodeConditionType {
  """NodeReady means kubelet is healthy and ready to accept pods"""
  Ready

  """
  NodeMemoryPressure means the kubelet is under pressure due to insufficient available memory
  """
  MemoryPressure

  """
  NodeDiskPressure means the kubelet is under pressure due to insufficient available disk
  """
  DiskPressure

  """
  NodePIDPressure means the kubelet is under pressure due to insufficient available PID
  """
  PIDPressure

  """
  NodeNetworkUnavailable means that network for the node is not correctly configured
  """
  NetworkUnavailable
}

"""These are valid condition statuses"""
enum ConditionStatus {
  """True means a resource is in the condition"""
  True

  """False means a resource is not in the condition"""
  False

  """
  Unknown means kubernetes cannot decide if a resource is in the condition or not
  """
  Unknown
}

"""The information for the edge cluster node address"""
type NodeAddress {
  """
  Edge cluster node address type, one of Hostname, ExternalIP or InternalIP
  """
  nodeAddressType: NodeAddressType!

  """The node address"""
  address: String!
}

"""The valid address type of edge cluster node"""
enum NodeAddressType {
  Hostname
  ExternalIP
  InternalIP
  ExternalDNS
  InternalDNS
}

"""contains a set of ids/uuids to uniquely identify the node"""
type NodeSystemInfo {
  """
  MachineID reported by the node. For unique machine identification in the cluster this field is preferred
  """
  machineID: String!

  """
  SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat host
  """
  systemUUID: String!

  """Boot ID reported by the node"""
  bootID: String!

  """
  Kernel Version reported by the node from "uname -r" (e.g. 3.16.0-0.bpo.4-amd64)
  """
  kernelVersion: String!

  """
  OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))
  """
  osImage: String!

  """
  ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0)
  """
  containerRuntimeVersion: String!

  """Kubelet Version reported by the node"""
  kubeletVersion: String!

  """KubeProxy Version reported by the node"""
  kubeProxyVersion: String!

  """The Operating System reported by the node"""
  operatingSystem: String!

  """The Architecture reported by the node"""
  architecture: String!
}

"""Contains information about the edge cluster pod"""
type EdgeClusterPod {
  """The pod metadata"""
  metadata: ObjectMeta!

  """The most recently observed status of the pod"""
  status: PodStatus!

  """The specification of the desired behavior of the pod"""
  spec: PodSpec!
}

"""
Contains the most recently observed status of the existing edge cluster pod
"""
type PodStatus {
  """IP address allocated to the pod. Routable at least within the cluster"""
  hostIP: String!

  """IP address allocated to the pod. Routable at least within the cluster"""
  podIP: String!

  """Current service state of edge cluster pod"""
  conditions: [PodCondition!]!
}

""" Current service state of pod"""
type PodCondition {
  """Type is the type of the condition"""
  type: PodConditionType!

  """Status is the status of the condition"""
  status: ConditionStatus!

  """Last time we got an update on a given condition"""
  lastProbeTime: String!

  """Last time the condition transitioned from one status to another"""
  lastTransitionTime: String!

  """Unique, one-word, CamelCase reason for the condition last transition"""
  reason: String!

  """Human-readable message indicating details about last transition"""
  message: String!
}

"""The edge cluster pod condition"""
enum PodConditionType {
  ContainersReady
  PodInitialized
  PodReady
  PodScheduled
}

"""
Contains the specification of the desired behavior of the existing edge cluster pod
"""
type PodSpec {
  """The name of the node where the Pod is deployed into"""
  nodeName: String!
}

"""Contains information about the edge cluster service"""
type EdgeClusterService {
  """The service metadata"""
  metadata: ObjectMeta!

  """The most recently observed status of the service"""
  status: ServiceStatus!

  """The specification of the desired behavior of the service"""
  spec: ServiceSpec!
}

"""
Contains the most recently observed status of the existing edge cluster service
"""
type ServiceStatus {
  """LoadBalancer contains the current status of the load-balancer"""
  loadBalancer: LoadBalancerStatus

  """Current service state of service"""
  conditions: [ServiceCondition!]!
}

""" Current service state of pod"""
type ServiceCondition {
  """Type is the type of the condition"""
  type: String!

  """Status is the status of the condition"""
  status: ConditionStatus!

  """Last time the condition transitioned from one status to another"""
  lastTransitionTime: String!

  """Unique, one-word, CamelCase reason for the condition last transition"""
  reason: String!

  """Human-readable message indicating details about last transition"""
  message: String!
}

"""
Contains the specification of the desired behavior of the existing edge cluster service
"""
type ServiceSpec {
  """The list of ports that are exposed by this service"""
  ports: [ServicePort!]!

  """clusterIPs is a list of IP addresses assigned to this service"""
  clusterIPs: [String!]!

  """type determines how the Service is exposed"""
  type: ServiceType!

  """
  externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service
  """
  externalIPs: [String!]!

  """
  externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record)
  """
  externalName: String
}

"""ServicePort contains information on service port"""
type ServicePort {
  """The name of this port within the service"""
  name: String!

  """The IP protocol for this port"""
  protocol: Protocol!

  """The port that will be exposed by this service"""
  port: Int!

  """
  Number or name of the port to access on the pods targeted by the service
  """
  targetPort: String!

  """
  The port on each node on which this service is exposed when type is NodePort or LoadBalancer
  """
  nodePort: Int!
}

"""ServiceType string describes ingress methods for a service"""
enum ServiceType {
  """
  ClusterIP means a service will only be accessible inside the cluster, via the cluster IP
  """
  ClusterIP

  """
  NodePort means a service will be exposed on one port of every node, in addition to ClusterIP type
  """
  NodePort

  """
  LoadBalancer means a service will be exposed via an external load balancer (if the cloud provider supports it), in addition to NodePort type
  """
  LoadBalancer

  """
  ExternalName means a service consists of only a reference to an external name that kubedns or equivalent will return as a CNAME record, with no exposing or proxying of any pods involved
  """
  ExternalName
}

"""A connection to a list of items."""
type EdgeClusterTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EdgeClusterTypeEdge]

  """Total number of edge clusters"""
  totalCount: Int
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type EdgeClusterTypeEdge {
  """The item at the end of the edge"""
  node: EdgeCluster

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type ProjectTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectTypeEdge]

  """Total number of projects"""
  totalCount: Int
}

"""An edge in a connection."""
type ProjectTypeEdge {
  """The item at the end of the edge"""
  node: Project

  """A cursor for use in pagination"""
  cursor: String!
}

input SortingOptionPair {
  name: String!
  direction: SortingDirection!
}

enum SortingDirection {
  ASCENDING
  DESCENDING
}

type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  createEdgeCluster(input: CreateEdgeClusterInput!): CreateEdgeClusterPayload
  updateEdgeCluster(input: UpdateEdgeClusterInput!): UpdateEdgeClusterPayload
  deleteEdgeCluster(input: DeleteEdgeClusterInput!): DeleteEdgeClusterPayload
}

type CreateProjectPayload {
  project: ProjectTypeEdge
  clientMutationId: String
}

input CreateProjectInput {
  name: String!
  clientMutationId: String
}

type UpdateProjectPayload {
  project: ProjectTypeEdge
  clientMutationId: String
}

input UpdateProjectInput {
  projectID: ID!
  name: String!
  clientMutationId: String
}

type DeleteProjectPayload {
  deletedProjectID: ID!
  clientMutationId: String
}

input DeleteProjectInput {
  projectID: ID!
  clientMutationId: String
}

type CreateEdgeClusterPayload {
  edgeCluster: EdgeClusterTypeEdge
  clientMutationId: String
}

input CreateEdgeClusterInput {
  projectID: ID!
  name: String!
  clusterSecret: String!
  clusterType: EdgeClusterType!
  clientMutationId: String
}

type UpdateEdgeClusterPayload {
  edgeCluster: EdgeClusterTypeEdge
  clientMutationId: String
}

input UpdateEdgeClusterInput {
  edgeClusterID: ID!
  projectID: ID!
  name: String!
  clusterSecret: String!
  clusterType: EdgeClusterType!
  clientMutationId: String
}

type DeleteEdgeClusterPayload {
  deletedEdgeClusterID: ID!
  clientMutationId: String
}

input DeleteEdgeClusterInput {
  edgeClusterID: ID!
  clientMutationId: String
}
