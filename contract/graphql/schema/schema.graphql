input CreateEdgeClusterInput {
  tenantID: ID!
  name: String!
  clusterPublicIPAddress: String!
  clientMutationId: String
}

type CreateEdgeClusterPayload {
  edgeCluster: EdgeClusterTypeEdge
  clientMutationId: String
}

input CreateTenantInput {
  name: String!
  clientMutationId: String
}

type CreateTenantPayload {
  tenant: TenantTypeEdge
  clientMutationId: String
}

input DeleteEdgeClusterInput {
  edgeClusterID: ID!
  clientMutationId: String
}

type DeleteEdgeClusterPayload {
  clientMutationId: String
}

input DeleteTenantInput {
  tenantID: ID!
  clientMutationId: String
}

type DeleteTenantPayload {
  clientMutationId: String
}

type EdgeCluster implements Node {
  id: ID!
  name: String!
  clusterPublicIPAddress: String!
  tenant: EdgeClusterTenant!
}

type EdgeClusterTenant implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type EdgeClusterTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EdgeClusterTypeEdge]

  """Total number of edge clusters"""
  totalCount: Int
}

"""An edge in a connection."""
type EdgeClusterTypeEdge {
  """The item at the end of the edge"""
  node: EdgeCluster

  """A cursor for use in pagination"""
  cursor: String!
}

type Mutation {
  createTenant(input: CreateTenantInput!): CreateTenantPayload
  updateTenant(input: UpdateTenantInput!): UpdateTenantPayload
  deleteTenant(input: DeleteTenantInput!): DeleteTenantPayload
  createEdgeCluster(input: CreateEdgeClusterInput!): CreateEdgeClusterPayload
  updateEdgeCluster(input: UpdateEdgeClusterInput!): UpdateEdgeClusterPayload
  deleteEdgeCluster(input: DeleteEdgeClusterInput!): DeleteEdgeClusterPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  user: User
}

enum SortingDirection {
  ASCENDING
  DESCENDING
}

input SortingOptionPair {
  name: String!
  direction: SortingDirection!
}

type Tenant implements Node {
  id: ID!
  name: String!
  edgeCluster(edgeClusterID: ID!): EdgeCluster
  edgeClusters(after: String, first: Int, before: String, last: Int, edgeClusterIDs: [ID!], sortOption: String): EdgeClusterTypeConnection
}

"""A connection to a list of items."""
type TenantTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TenantTypeEdge]

  """Total number of tenants"""
  totalCount: Int
}

"""An edge in a connection."""
type TenantTypeEdge {
  """The item at the end of the edge"""
  node: Tenant

  """A cursor for use in pagination"""
  cursor: String!
}

input UpdateEdgeClusterInput {
  edgeClusterID: ID!
  tenantID: ID!
  name: String!
  clusterPublicIPAddress: String!
  clientMutationId: String
}

type UpdateEdgeClusterPayload {
  edgeCluster: EdgeClusterTypeEdge
  clientMutationId: String
}

input UpdateTenantInput {
  tenantID: ID!
  name: String!
  clientMutationId: String
}

type UpdateTenantPayload {
  tenant: TenantTypeEdge
  clientMutationId: String
}

type User implements Node {
  id: ID!
  tenant(tenantID: ID!): Tenant
  tenants(after: String, first: Int, before: String, last: Int, tenantIDs: [ID!], sortingOptions: [SortingOptionPair!]): TenantTypeConnection
  edgeCluster(edgeClusterID: ID!): EdgeCluster
  edgeClusters(after: String, first: Int, before: String, last: Int, edgeClusterIDs: [ID!], tenantIDs: [ID!], sortingOptions: [SortingOptionPair!]): EdgeClusterTypeConnection
}
