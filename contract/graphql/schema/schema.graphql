type Query {
  user: User
}

type User implements Node {
  id: ID!
  project(projectID: ID!): Project
  projects(after: String, first: Int, before: String, last: Int, projectIDs: [ID!], sortingOptions: [SortingOptionPair!]): ProjectTypeConnection
  edgeCluster(edgeClusterID: ID!): EdgeCluster
  edgeClusters(after: String, first: Int, before: String, last: Int, edgeClusterIDs: [ID!], projectIDs: [ID!], sortingOptions: [SortingOptionPair!]): EdgeClusterTypeConnection
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Project implements Node {
  id: ID!
  name: String!
  edgeCluster(edgeClusterID: ID!): EdgeCluster
  edgeClusters(after: String, first: Int, before: String, last: Int, edgeClusterIDs: [ID!], sortOption: String): EdgeClusterTypeConnection
}

"""The edge cluster"""
type EdgeCluster implements Node {
  """The unique edge cluster ID"""
  id: ID!

  """The edge cluster name"""
  name: String!

  """The cluster secrect value"""
  clusterSecret: String!

  """The cluster type"""
  clusterType: EdgeClusterType!

  """The project that owns the edge cluster"""
  project: EdgeClusterProject!

  """The edge cluster provision details"""
  provisionDetail: EdgeClusterProvisionDetail

  """The list of edge cluster nodes details"""
  nodes: [EdgeClusterNode!]!
}

"""The different cluster types"""
enum EdgeClusterType {
  """K3S cluster"""
  K3S
}

type EdgeClusterProject implements Node {
  id: ID!
  name: String!
}

"""
The edge cluster provision details contains details such as current status of the edge cluster as well as ingress address of the edge cluster to connect to
"""
type EdgeClusterProvisionDetail {
  """The ingress details of the edge cluster master node"""
  ingress: [Ingress!]!

  """The ingress details of the edge cluster master node"""
  ports: [Port!]!

  """The provisioned edge cluster kubeconfig content"""
  kubeconfigContent: String
}

"""
Ingress represents the status of a load-balancer ingress point traffic intended for the service should be sent to an ingress point
"""
type Ingress {
  """
  IP is set for load-balancer ingress points that are IP based, (typically GCE or OpenStack load-balancers)
  """
  ip: String

  """
  Hostname is set for load-balancer ingress points that are DNS based, (typically AWS load-balancers)
  """
  hostname: String
}

"""Port contains information on service port"""
type Port {
  """The port number of the edge-cluster master port"""
  port: Int!

  """The protocol of the edge-cluster master port"""
  protocol: Protocol!
}

"""Protocol defines network protocols"""
enum Protocol {
  """TCP protocol"""
  TCP

  """UDP protocol"""
  UDP

  """SCTP protocol"""
  SCTP
}

"""Contains information about the edge cluster node"""
type EdgeClusterNode {
  """The node metadata"""
  metadata: EdgeClusterObjectMetadata!

  """The most recently observed status of the node"""
  status: EdgeClusterNodeStatus!
}

"""Contains standard edge cluster objects metadata."""
type EdgeClusterObjectMetadata {
  """The object unique identitfier"""
  id: ID!

  """The object name"""
  name: String!

  """The object namespace"""
  namespace: String
}

"""Contains information about the current status of a node"""
type EdgeClusterNodeStatus {
  """Conditions is an array of current observed node conditions"""
  conditions: [EdgeClusterNodeCondition!]!

  """Addresses is the list of addresses reachable to the node"""
  addresses: [EdgeClusterNodeAddress!]!

  """NodeInfo is the set of ids/uuids to uniquely identify the node"""
  nodeInfo: EdgeClusterNodeSystemInfo!
}

"""Condition information for a node"""
type EdgeClusterNodeCondition {
  """Type of node condition"""
  type: EdgeClusterNodeConditionType!

  """Status of the condition, one of True, False, Unknown"""
  status: EdgeClusterNodeConditionStatus!

  """Last time we got an update on a given condition"""
  lastHeartbeatTime: String!

  """Last time the condition transit from one status to another"""
  lastTransitionTime: String!

  """(brief) reason for the condition last transition"""
  reason: String!

  """Human readable message indicating details about last transition"""
  message: String!
}

"""The valid conditions of node"""
enum EdgeClusterNodeConditionType {
  """NodeReady means kubelet is healthy and ready to accept pods"""
  Ready

  """
  NodeMemoryPressure means the kubelet is under pressure due to insufficient available memory
  """
  MemoryPressure

  """
  NodeDiskPressure means the kubelet is under pressure due to insufficient available disk
  """
  DiskPressure

  """
  NodePIDPressure means the kubelet is under pressure due to insufficient available PID
  """
  PIDPressure

  """
  NodeNetworkUnavailable means that network for the node is not correctly configured
  """
  NetworkUnavailable
}

"""These are valid condition statuses"""
enum EdgeClusterNodeConditionStatus {
  """True means a resource is in the condition"""
  True

  """False means a resource is not in the condition"""
  False

  """
  Unknown means kubernetes cannot decide if a resource is in the condition or not
  """
  Unknown
}

"""The information for the edge cluster node address"""
type EdgeClusterNodeAddress {
  """
  Edge cluster node address type, one of Hostname, ExternalIP or InternalIP
  """
  nodeAddressType: EdgeClusterNodeAddressType!

  """The node address"""
  address: String!
}

"""The valid address type of edge cluster node"""
enum EdgeClusterNodeAddressType {
  Hostname
  ExternalIP
  InternalIP
  ExternalDNS
  InternalDNS
}

"""contains a set of ids/uuids to uniquely identify the node"""
type EdgeClusterNodeSystemInfo {
  """
  MachineID reported by the node. For unique machine identification in the cluster this field is preferred
  """
  machineID: String!

  """
  SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat host
  """
  systemUUID: String!

  """Boot ID reported by the node"""
  bootID: String!

  """
  Kernel Version reported by the node from "uname -r" (e.g. 3.16.0-0.bpo.4-amd64).
  """
  kernelVersion: String!

  """
  OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy))
  """
  osImage: String!

  """
  ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0)
  """
  containerRuntimeVersion: String!

  """Kubelet Version reported by the node"""
  kubeletVersion: String!

  """KubeProxy Version reported by the node"""
  kubeProxyVersion: String!

  """The Operating System reported by the node"""
  operatingSystem: String!

  """The Architecture reported by the node"""
  architecture: String!
}

"""A connection to a list of items."""
type EdgeClusterTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EdgeClusterTypeEdge]

  """Total number of edge clusters"""
  totalCount: Int
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type EdgeClusterTypeEdge {
  """The item at the end of the edge"""
  node: EdgeCluster

  """A cursor for use in pagination"""
  cursor: String!
}

"""A connection to a list of items."""
type ProjectTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectTypeEdge]

  """Total number of projects"""
  totalCount: Int
}

"""An edge in a connection."""
type ProjectTypeEdge {
  """The item at the end of the edge"""
  node: Project

  """A cursor for use in pagination"""
  cursor: String!
}

input SortingOptionPair {
  name: String!
  direction: SortingDirection!
}

enum SortingDirection {
  ASCENDING
  DESCENDING
}

type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  createEdgeCluster(input: CreateEdgeClusterInput!): CreateEdgeClusterPayload
  updateEdgeCluster(input: UpdateEdgeClusterInput!): UpdateEdgeClusterPayload
  deleteEdgeCluster(input: DeleteEdgeClusterInput!): DeleteEdgeClusterPayload
}

type CreateProjectPayload {
  project: ProjectTypeEdge
  clientMutationId: String
}

input CreateProjectInput {
  name: String!
  clientMutationId: String
}

type UpdateProjectPayload {
  project: ProjectTypeEdge
  clientMutationId: String
}

input UpdateProjectInput {
  projectID: ID!
  name: String!
  clientMutationId: String
}

type DeleteProjectPayload {
  deletedProjectID: ID!
  clientMutationId: String
}

input DeleteProjectInput {
  projectID: ID!
  clientMutationId: String
}

type CreateEdgeClusterPayload {
  edgeCluster: EdgeClusterTypeEdge
  clientMutationId: String
}

input CreateEdgeClusterInput {
  projectID: ID!
  name: String!
  clusterSecret: String!
  clusterType: EdgeClusterType!
  clientMutationId: String
}

type UpdateEdgeClusterPayload {
  edgeCluster: EdgeClusterTypeEdge
  clientMutationId: String
}

input UpdateEdgeClusterInput {
  edgeClusterID: ID!
  projectID: ID!
  name: String!
  clusterSecret: String!
  clusterType: EdgeClusterType!
  clientMutationId: String
}

type DeleteEdgeClusterPayload {
  deletedEdgeClusterID: ID!
  clientMutationId: String
}

input DeleteEdgeClusterInput {
  edgeClusterID: ID!
  clientMutationId: String
}
