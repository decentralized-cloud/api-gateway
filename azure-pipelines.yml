trigger:
  tags:
    include:
      - v*
  branches:
    include:
      - main
      - release/*
      - feature/*
      - hotfix/*
  paths:
    exclude:
      - README.md

pool:
  vmImage: "ubuntu-latest"

variables:
  DOCKER_CONTAINER_REGISTRY: "Decentralized Cloud Docker Hub"
  DOCKER_REPOSITORY_NAME: "decentralizedcloud/api-gateway"
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    artifact_version: latest
  ${{ if not(eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
    artifact_version: $(GitVersion.SemVer)

steps:
  - task: gitversion/setup@0
    displayName: "Setting up GitVersion"
    inputs:
      versionSpec: "5.x"

  - task: gitversion/execute@0
    displayName: "Figure out GitVersion"
    inputs:
      configFilePath: "./GitVersion.yml"

  - task: Bash@3
    displayName: "Build GraphQL contract"
    inputs:
      filePath: "$(system.defaultWorkingDirectory)/script/compile-graphql.sh"
      arguments: "$(system.defaultWorkingDirectory)/script"

  - task: Docker@2
    displayName: "Build docker image"
    inputs:
      repository: $(DOCKER_REPOSITORY_NAME)
      command: "build"
      Dockerfile: "$(system.defaultWorkingDirectory)/docker/Dockerfile.build"
      buildContext: "$(system.defaultWorkingDirectory)"
      arguments: "--build-arg VERSION=${{variables.artifact_version}}"
      tags: ${{variables.artifact_version}}

  - task: Docker@2
    displayName: "Test and coverage"
    inputs:
      command: "build"
      Dockerfile: "$(system.defaultWorkingDirectory)/docker/Dockerfile.testAndCoverage"
      buildContext: "$(system.defaultWorkingDirectory)"
      arguments: "--build-arg CI_SERVICE=$(CI_SERVICE) --build-arg COVERALLS_TOKEN=$(COVERALLS_TOKEN)"

  - task: Docker@2
    displayName: "Docker login"
    inputs:
      containerRegistry: $(DOCKER_CONTAINER_REGISTRY)
      command: "login"

  - task: Docker@2
    displayName: "Push docker image"
    inputs:
      containerRegistry: $(DOCKER_CONTAINER_REGISTRY)
      repository: $(DOCKER_REPOSITORY_NAME)
      command: "push"
      buildContext: "$(system.defaultWorkingDirectory)"
      tags: ${{variables.artifact_version}}

  - task: Docker@2
    displayName: "Docker logout"
    inputs:
      containerRegistry: $(DOCKER_CONTAINER_REGISTRY)
      command: "logout"

  - task: HelmInstaller@0
    displayName: "Installing helm"
    inputs:
      helmVersion: "3.5.2"
      installKubectl: false

  - task: Bash@3
    displayName: "Packaging helm"
    inputs:
      targetType: "inline"
      script: |
        helm package --destination "$(system.defaultWorkingDirectory)/chart-output" --app-version ${{variables.artifact_version}} "$(system.defaultWorkingDirectory)/helm-charts"

  - task: PublishPipelineArtifact@1
    displayName: "Publish helm artifact"
    inputs:
      targetPath: "$(system.defaultWorkingDirectory)/chart-output"
      artifact: "helm"
      publishLocation: "pipeline"
