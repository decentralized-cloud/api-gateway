// Code generated by MockGen. DO NOT EDIT.
// Source: ../contract.go

// Package mock_transport is a generated GoMock package.
package mock_transport

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransportContract is a mock of TransportContract interface
type MockTransportContract struct {
	ctrl     *gomock.Controller
	recorder *MockTransportContractMockRecorder
}

// MockTransportContractMockRecorder is the mock recorder for MockTransportContract
type MockTransportContractMockRecorder struct {
	mock *MockTransportContract
}

// NewMockTransportContract creates a new mock instance
func NewMockTransportContract(ctrl *gomock.Controller) *MockTransportContract {
	mock := &MockTransportContract{ctrl: ctrl}
	mock.recorder = &MockTransportContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransportContract) EXPECT() *MockTransportContractMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockTransportContract) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockTransportContractMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTransportContract)(nil).Start))
}

// Stop mocks base method
func (m *MockTransportContract) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockTransportContractMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTransportContract)(nil).Stop))
}
